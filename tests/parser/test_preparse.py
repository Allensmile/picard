from __future__ import absolute_import
import unittest
from picard.parser.parse import preparse
from .resource.hyperspec import hyperspec

expected_result = {'compile': {'optimizer': {'&choice': {'options': ['rmsprop', 'adam']}}}, 'operators': {'lstm': {'layer': 'LSTM', 'config': {'output_dim': 32}}, 'embedding': {'layer': 'Embedding', 'config': {'output_dim': 512, 'dropout': 0.2, 'input_dim': 10000, 'input_length': 500}}, 'ff': {'&choice': {'options': [{'#compose': [{'&choice': {'options': [{'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}, {'layer': 'Dropout', 'config': {'p': {'&uniform': {'high': 0.3, 'low': 0.1}}}}]}, {'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}]}]}}, {'&choice': {'options': [{'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}, {'layer': 'Dropout', 'config': {'p': {'&uniform': {'high': 0.3, 'low': 0.1}}}}]}, {'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}]}]}}]}, {'#compose': [{'&choice': {'options': [{'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}, {'layer': 'Dropout', 'config': {'p': {'&uniform': {'high': 0.3, 'low': 0.1}}}}]}, {'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}]}]}}, {'&choice': {'options': [{'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}, {'layer': 'Dropout', 'config': {'p': {'&uniform': {'high': 0.3, 'low': 0.1}}}}]}, {'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}]}]}}, {'&choice': {'options': [{'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}, {'layer': 'Dropout', 'config': {'p': {'&uniform': {'high': 0.3, 'low': 0.1}}}}]}, {'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}]}]}}]}, {'#compose': [{'&choice': {'options': [{'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}, {'layer': 'Dropout', 'config': {'p': {'&uniform': {'high': 0.3, 'low': 0.1}}}}]}, {'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}]}]}}, {'&choice': {'options': [{'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}, {'layer': 'Dropout', 'config': {'p': {'&uniform': {'high': 0.3, 'low': 0.1}}}}]}, {'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}]}]}}, {'&choice': {'options': [{'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}, {'layer': 'Dropout', 'config': {'p': {'&uniform': {'high': 0.3, 'low': 0.1}}}}]}, {'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}]}]}}, {'&choice': {'options': [{'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}, {'layer': 'Dropout', 'config': {'p': {'&uniform': {'high': 0.3, 'low': 0.1}}}}]}, {'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}]}]}}]}, {'#compose': [{'&choice': {'options': [{'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}, {'layer': 'Dropout', 'config': {'p': {'&uniform': {'high': 0.3, 'low': 0.1}}}}]}, {'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}]}]}}, {'&choice': {'options': [{'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}, {'layer': 'Dropout', 'config': {'p': {'&uniform': {'high': 0.3, 'low': 0.1}}}}]}, {'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}]}]}}, {'&choice': {'options': [{'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}, {'layer': 'Dropout', 'config': {'p': {'&uniform': {'high': 0.3, 'low': 0.1}}}}]}, {'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}]}]}}, {'&choice': {'options': [{'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}, {'layer': 'Dropout', 'config': {'p': {'&uniform': {'high': 0.3, 'low': 0.1}}}}]}, {'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}]}]}}, {'&choice': {'options': [{'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}, {'layer': 'Dropout', 'config': {'p': {'&uniform': {'high': 0.3, 'low': 0.1}}}}]}, {'#compose': [{'layer': 'Dense', 'config': {'output_dim': 512, 'activation': {'&choice': {'options': ['relu', 'sigmoid']}}}}]}]}}]}]}}, 'denseOut': {'layer': 'Dense', 'config': {'output_dim': 1, 'activation': {'&choice': {'options': ['relu', 'sigmoid', 'softmax']}}}}}, 'legs': {'in': {'input': {}}, 'out': {'output': {'loss': 'binary_crossentropy'}}}, 'fit': {'batch_size': {'&choice': {'options': [16, 32]}}}, 'edges': [{'operator': 'embedding', 'source': 'input', 'target': 'emb'}, {'operator': 'lstm', 'source': 'emb', 'target': 'ffStart'}, {'operator': 'ff', 'source': 'ffStart', 'target': 'ffEnd'}, {'operator': 'denseOut', 'source': 'ffEnd', 'target': 'output'}]}


class TestPreparse(unittest.TestCase):

    def test_preparse(self):
        self.assertEqual(preparse(hyperspec), expected_result)

if __name__ == '__main__':
    unittest.main()
